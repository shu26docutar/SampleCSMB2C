<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, $timeout, spUtil) {

  var c = this;
	var g_form = $scope.page.g_form; // g_formクラスの呼び出し
	
	// OnChange
	$rootScope.$on("field.change",function(evt, parms) {
		var filed_name = "u_use_facility";
  	if (parms.field.name == filed_name) {
			var facility = g_form.getValue(filed_name);
			
			// 変更時値がある場合にWdigetを更新
			if ( facility ) {
				c.data.facility = facility;
				c.server.update();
			}
  	}
  });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.table_box {
  overflow-x: auto;
  width:100%;
  -webkit-overflow-scrolling: touch;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
}

th, td {
  vertical-align: middle;
  padding: 20px;
  border: 1px solid #000;
  color: #000;
  font-size: 14px;
  text-align: center;
  white-space: nowrap;
}

th {
  background: #1F8476;
}

td {
  background: #fff;
}

.sticky {
  position: sticky;
  top: 0;
  left: 0;
  background: none;
  border-left: none;
  border-right: none;
}

.sticky::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-left: 1px solid #000;
  border-right: 1px solid #000;
  background: #1F8476;
  z-index: -1;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Reserve Info</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	var slots   = [],
			days    = [];
	
	// 更新前処理
	if ( !input ) {
		
	}
	/*
	現状の課題：
	・日付がに英語圏の日付で計算しているので、時間がづれる
	*/
	
	// 更新後処理
	if ( input ) {
		var g_facility      = getRecordBySysId("x_1300226_smpsalon_samplefacilitymodel", input.facility),
				SLOT_START_HOUR = timeToDecimalHours(g_facility.u_available_start_time.getDisplayValue()),
				SLOT_END_HOUR   = timeToDecimalHours(g_facility.u_available_end_time.getDisplayValue()),
				SLOT_INTERVAL   = timeToDecimalHours(g_facility.u_billing_hour_unit.getDisplayValue()),
				SLOT_COUNT      = (SLOT_END_HOUR - SLOT_START_HOUR) / SLOT_INTERVAL,
				DAYS_TO_SHOW    = 7;

		// スロットラベル作成
		var dateList = [],
				today    = new Date(),
				addDate  = 1;

		var gdt = new GlideDateTime(today + " 00:00:00");
		for ( var i=0; i<DAYS_TO_SHOW; i++ ) {
			var gd = new GlideDateTime(gdt);
			gd.addDaysLocalTime(i);
			dateList.push(gd.getDate().getDisplayValue()); // '2025-05-01' 形式
		}

		// 予約データ取得
		var reservations = {};
		var gr = new GlideRecord('x_1300226_smpsalon_samplereservationmanagement');
		gr.addQuery('u_use_date', '>=', dateList[0]);
		gr.addQuery('u_use_date', '<=', dateList[dateList.length - 1]);
		gr.query();

		while ( gr.next() ) {
			var date      = gr.u_use_date.getDisplayValue();
			var startTime = gr.u_use_start_time.getDisplayValue();
			var endTime   = gr.u_use_end_time.getDisplayValue();

			if ( !reservations[date] ) reservations[date] = [];

			// 予約範囲を小数時間に変換
			var s = timeToDecimal(startTime); // 例: "11:00:00" → 11
			var e = timeToDecimal(endTime);   // 例: "12:00:00" → 12

			reservations[date].push({ start: s, end: e });
		}

		
		// タイムスロット表を作成
		for ( var i=0; i<SLOT_COUNT; i++ ) {
			var slotStart = i != 0 ? slotEnd :SLOT_START_HOUR + i;
			var slotEnd   = slotStart + SLOT_INTERVAL;
			var row       = {
												label: formatTime(slotStart) + "～" + formatTime(slotEnd),
												availability: []
											};
			
			for ( var d=0; d<DAYS_TO_SHOW; d++ ) {
				var day             = dateList[d];
				var isReserved      = false;
				var dayReservations = reservations[day] || [];
				
				for ( var r=0; r<dayReservations.length; r++ ) {
					var res = dayReservations[r];
					
					if ( (slotStart < res.end) && (slotEnd > res.start) ) {
						isReserved = true;
						break;
					}
				}
				row.availability.push(isReserved ? '×' : '○');

			}
			slots.push(row);
			
		}
		data.slots    = slots;
		data.dateList = dateList;
	}
	
	// 数値⇒h:mm変換
	function formatTime(time) { 
		var h = Math.floor(time);
		var m = Math.round((time - h) * 60);
		return h + ':' + m.toString().padStart(2, '0');
	}
	
	// 時間文字列 → 小数時間変換
	function timeToDecimal(timeStr) {
		var parts = timeStr.split(':');
		return parseInt(parts[0], 10) + parseInt(parts[1], 10) / 60;
	}
	
	// SysIDベースでレコード取得
	function getRecordBySysId(target_table, target_id) {
		var g_table = new GlideRecord(target_table);
		g_table.addQuery('sys_id', target_id);
		g_table.query();

		if ( g_table.next() ) {
			return g_table;
		}
	}
	
	// 時間を少数に変換
	function timeToDecimalHours(times) {
		var parts   = times.split(':');
		var hours   = parseInt(parts[0], 10);
		var minutes = parseInt(parts[1], 10);
		var seconds = parseInt(parts[2], 10);

		var decimal = hours + (minutes/60) + (seconds/ 3600);
		return decimal;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>hattori</sys_created_by>
        <sys_created_on>2025-06-09 07:41:12</sys_created_on>
        <sys_id>a3c07499838622104ed86f80ceaad30c</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>Reserve Info</sys_name>
        <sys_package display_value="Falicity Support" source="x_1300226_smpsalon">7e24883783a962104ed86f80ceaad366</sys_package>
        <sys_policy/>
        <sys_scope display_value="Falicity Support">7e24883783a962104ed86f80ceaad366</sys_scope>
        <sys_update_name>sp_widget_a3c07499838622104ed86f80ceaad30c</sys_update_name>
        <sys_updated_by>hattori</sys_updated_by>
        <sys_updated_on>2025-06-10 01:14:50</sys_updated_on>
        <template><![CDATA[<p>予約情報</p>
<div class="table_box">
  <table class="table table-bordered">
    <!--<pre>{{data|json}}</pre>-->
    <thead>
      <tr>
        <th class="sticky" >利用時間帯</th>
        <th ng-repeat="date in data.dateList">{{ date | date:'M/d' }}</th>
      </tr>
    </thead>

    <tbody>
      <tr ng-repeat="row in data.slots track by $index" ng-init="time_index = $index">
       <td class="sticky" >{{ row.label }}</td>

        <td ng-repeat="status in row.availability track by $index" style="text-align: center; font-size:25px;">
          {{ status }}
        </td>
      </tr>
    </tbody>
  </table>
</div>
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>a3c07499838622104ed86f80ceaad30c</id>
        <sys_created_by>hattori</sys_created_by>
        <sys_created_on>2025-06-09 07:41:31</sys_created_on>
        <sys_id>4ce0f499838622104ed86f80ceaad377</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>hattori</sys_updated_by>
        <sys_updated_on>2025-06-09 07:41:31</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
